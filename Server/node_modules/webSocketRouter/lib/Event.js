var Event = function(name) {

    this.name = name;
    this._observers = {};
    this._observersCount = 0;

};

/**
 * Add observer
 * @param {AbstractObserver} observer
 */
Event.prototype.addObserver = function(observer) {
    var id = observer.getId();
    if (!this._observers[id]) {
        this._observers[id] = observer;
        this._observersCount++;
    }
};

/**
 * Remove observer
 * @param {AbstractObserver} observer
 */
Event.prototype.removeObserver = function(observer) {
    var id = observer.getId();
    if (this._observers[id]) {
        delete this._observers[id];
        this._observersCount--;
    }
};

/**
 * Returns true if number of observers greater than 0, false otherwise
 * @returns {boolean}
 */
Event.prototype.isObserved = function() {
    return this._observersCount > 0;
};

/**
 * Fire event for all observers
 *
 * @param {Context} context
 */
Event.prototype.fire = function(context) {
    this.isObserved() ? this.continueFireEvent(context) : this.finishFireEvent(context);
};

/**
 * Continue to fire event after checking if there are any observers
 * @param {Context} context
 */
Event.prototype.continueFireEvent = function(context) {

    // get context data
    var me = this;

    // set number of observers left to observe
    var processing = this._observersCount;

    // callback method after event is processed by an observer
    var eventProcessed = function() {
        processing--;
        if (processing == 0) {
            me.finishFireEvent(context);
        }
    };

    for (var i in this._observers) {

        if (!this._observers.hasOwnProperty(i)) {
            continue;
        }

        // stop event on return false
        if (!this._observers[i].onEvent(this.name, context, eventProcessed)) {
            break;
        }

    }

};

/**
 * Invoke callback after all observers have processed the event
 * @param {Context} context
 */
Event.prototype.finishFireEvent = function(context) {

    var data = context.getData();
    if (typeof(data.callback) == 'function') {
        data.callback(context);
    }

};

module.exports = Event;