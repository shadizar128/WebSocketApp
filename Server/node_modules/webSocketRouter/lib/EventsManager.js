var Event = require('./Event');

var EventsManager = function() {

    /**
     * @type {{EventListener}}
     * @private
     */
    this._events = {};

};

/**
 * Register observer to event
 *
 * @param {string} eventName
 * @param {AbstractObserver} observer
 */
EventsManager.prototype.register = function(eventName, observer) {

    // create new event
    if (!this._events[eventName]) {
        this._events[eventName] = new Event(eventName);
    }

    // add observer
    this._events[eventName].addObserver(observer);

};

/**
 * Unregister observer from event
 *
 * @param {string} eventName
 * @param {AbstractObserver} observer
 */
EventsManager.prototype.unregister = function(eventName, observer) {

    if (this._events[eventName]) {

        // remove observer
        this._events[eventName].removeObserver(observer);

        // delete event
        if (!this._events[eventName].isObserved()) {
            delete this._events[eventName];
        }

    }

};

/**
 *
 * @param {string} eventName
 * @param {Context} context
 */
EventsManager.prototype.fireEvent = function(eventName, context) {

    // create new event
    if (!this._events[eventName]) {
        Event.prototype.finishFireEvent(context);
    } else {
        this._events[eventName].fire(context);
    }

};

module.exports = EventsManager;